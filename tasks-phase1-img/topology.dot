digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] data.google_client_config.provider (expand)" [label = "data.google_client_config.provider", shape = "box"]
		"[root] data.google_container_cluster.composer-gke-cluster (expand)" [label = "data.google_container_cluster.composer-gke-cluster", shape = "box"]
		"[root] google_compute_firewall.allow-all-internal (expand)" [label = "google_compute_firewall.allow-all-internal", shape = "box"]
		"[root] kubernetes_service.dbt-task-service (expand)" [label = "kubernetes_service.dbt-task-service", shape = "box"]
		"[root] module.composer.google_compute_subnetwork.composer-subnet (expand)" [label = "module.composer.google_compute_subnetwork.composer-subnet", shape = "box"]
		"[root] module.composer.google_project_iam_member.composer-member (expand)" [label = "module.composer.google_project_iam_member.composer-member", shape = "box"]
		"[root] module.composer.google_project_iam_member.dataproc-editor-iam (expand)" [label = "module.composer.google_project_iam_member.dataproc-editor-iam", shape = "box"]
		"[root] module.composer.google_project_iam_member.dataproc-sa-user-iam (expand)" [label = "module.composer.google_project_iam_member.dataproc-sa-user-iam", shape = "box"]
		"[root] module.composer.google_project_service.api (expand)" [label = "module.composer.google_project_service.api", shape = "box"]
		"[root] module.composer.google_service_account.tbd-composer-sa (expand)" [label = "module.composer.google_service_account.tbd-composer-sa", shape = "box"]
		"[root] module.composer.module.composer.data.google_project.project (expand)" [label = "module.composer.module.composer.data.google_project.project", shape = "box"]
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" [label = "module.composer.module.composer.google_composer_environment.composer_env", shape = "box"]
		"[root] module.composer.module.composer.google_project_iam_member.composer_agent_service_account (expand)" [label = "module.composer.module.composer.google_project_iam_member.composer_agent_service_account", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)" [label = "module.data-pipelines.google_storage_bucket.tbd-code-bucket", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)" [label = "module.data-pipelines.google_storage_bucket.tbd-data-bucket", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer (expand)" [label = "module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor (expand)" [label = "module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket_object.dag-code (expand)" [label = "module.data-pipelines.google_storage_bucket_object.dag-code", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket_object.dbt-dag-code (expand)" [label = "module.data-pipelines.google_storage_bucket_object.dbt-dag-code", shape = "box"]
		"[root] module.data-pipelines.google_storage_bucket_object.job-code (expand)" [label = "module.data-pipelines.google_storage_bucket_object.job-code", shape = "box"]
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" [label = "module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster", shape = "box"]
		"[root] module.dataproc.google_project_service.dataproc (expand)" [label = "module.dataproc.google_project_service.dataproc", shape = "box"]
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" [label = "module.dbt_docker_image.docker_image.dbt", shape = "box"]
		"[root] module.dbt_docker_image.docker_registry_image.dbt (expand)" [label = "module.dbt_docker_image.docker_registry_image.dbt", shape = "box"]
		"[root] module.gcr.google_artifact_registry_repository.registry (expand)" [label = "module.gcr.google_artifact_registry_repository.registry", shape = "box"]
		"[root] module.gcr.google_project_service.api (expand)" [label = "module.gcr.google_project_service.api", shape = "box"]
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" [label = "module.jupyter_docker_image.docker_image.jupyter", shape = "box"]
		"[root] module.jupyter_docker_image.docker_registry_image.jupyterlab (expand)" [label = "module.jupyter_docker_image.docker_registry_image.jupyterlab", shape = "box"]
		"[root] module.vertex_ai_workbench.data.google_project.project (expand)" [label = "module.vertex_ai_workbench.data.google_project.project", shape = "box"]
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" [label = "module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook", shape = "box"]
		"[root] module.vertex_ai_workbench.google_project_iam_binding.token_creator_role (expand)" [label = "module.vertex_ai_workbench.google_project_iam_binding.token_creator_role", shape = "box"]
		"[root] module.vertex_ai_workbench.google_project_service.notebooks (expand)" [label = "module.vertex_ai_workbench.google_project_service.notebooks", shape = "box"]
		"[root] module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket (expand)" [label = "module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket", shape = "box"]
		"[root] module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding (expand)" [label = "module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding", shape = "box"]
		"[root] module.vertex_ai_workbench.google_storage_bucket_object.post-startup (expand)" [label = "module.vertex_ai_workbench.google_storage_bucket_object.post-startup", shape = "box"]
		"[root] module.vpc.google_compute_firewall.default-internal-allow-all (expand)" [label = "module.vpc.google_compute_firewall.default-internal-allow-all", shape = "box"]
		"[root] module.vpc.google_compute_firewall.fw-allow-ingress-from-iap (expand)" [label = "module.vpc.google_compute_firewall.fw-allow-ingress-from-iap", shape = "box"]
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" [label = "module.vpc.module.cloud-router.google_compute_router.router", shape = "box"]
		"[root] module.vpc.module.cloud-router.google_compute_router_nat.nats (expand)" [label = "module.vpc.module.cloud-router.google_compute_router_nat.nats", shape = "box"]
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules (expand)" [label = "module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules", shape = "box"]
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)" [label = "module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress", shape = "box"]
		"[root] module.vpc.module.vpc.module.routes.google_compute_route.route (expand)" [label = "module.vpc.module.vpc.module.routes.google_compute_route.route", shape = "box"]
		"[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)" [label = "module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork", shape = "box"]
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" [label = "module.vpc.module.vpc.module.vpc.google_compute_network.network", shape = "box"]
		"[root] module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host (expand)" [label = "module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host", shape = "box"]
		"[root] provider[\"registry.terraform.io/hashicorp/google-beta\"]" [label = "provider[\"registry.terraform.io/hashicorp/google-beta\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/google\"]" [label = "provider[\"registry.terraform.io/hashicorp/google\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" [label = "provider[\"registry.terraform.io/hashicorp/kubernetes\"]", shape = "diamond"]
		"[root] provider[\"registry.terraform.io/kreuzwerker/docker\"]" [label = "provider[\"registry.terraform.io/kreuzwerker/docker\"]", shape = "diamond"]
		"[root] var.ai_notebook_instance_owner" [label = "var.ai_notebook_instance_owner", shape = "note"]
		"[root] var.project_name" [label = "var.project_name", shape = "note"]
		"[root] var.region" [label = "var.region", shape = "note"]
		"[root] data.google_client_config.provider (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"]"
		"[root] data.google_container_cluster.composer-gke-cluster (expand)" -> "[root] module.composer.output.gke_cluster (expand)"
		"[root] google_compute_firewall.allow-all-internal (expand)" -> "[root] module.vpc.output.network (expand)"
		"[root] kubernetes_service.dbt-task-service (expand)" -> "[root] local.spark_blockmgr_port (expand)"
		"[root] kubernetes_service.dbt-task-service (expand)" -> "[root] local.spark_driver_port (expand)"
		"[root] kubernetes_service.dbt-task-service (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]"
		"[root] local.code_bucket_name (expand)" -> "[root] var.project_name"
		"[root] local.data_bucket_name (expand)" -> "[root] var.project_name"
		"[root] local.notebook_subnet_id (expand)" -> "[root] local.notebook_subnet_name (expand)"
		"[root] local.notebook_subnet_id (expand)" -> "[root] var.region"
		"[root] module.composer (close)" -> "[root] module.composer.google_project_iam_member.dataproc-editor-iam (expand)"
		"[root] module.composer (close)" -> "[root] module.composer.google_project_iam_member.dataproc-sa-user-iam (expand)"
		"[root] module.composer (close)" -> "[root] module.composer.module.composer (close)"
		"[root] module.composer (close)" -> "[root] module.composer.output.data_service_account (expand)"
		"[root] module.composer (close)" -> "[root] module.composer.output.gcs_bucket (expand)"
		"[root] module.composer (close)" -> "[root] module.composer.output.gke_cluster (expand)"
		"[root] module.composer (expand)" -> "[root] module.vpc (close)"
		"[root] module.composer.google_compute_subnetwork.composer-subnet (expand)" -> "[root] module.composer.var.network (expand)"
		"[root] module.composer.google_compute_subnetwork.composer-subnet (expand)" -> "[root] module.composer.var.region (expand)"
		"[root] module.composer.google_compute_subnetwork.composer-subnet (expand)" -> "[root] module.composer.var.subnet_address (expand)"
		"[root] module.composer.google_compute_subnetwork.composer-subnet (expand)" -> "[root] module.composer.var.subnet_name (expand)"
		"[root] module.composer.google_project_iam_member.composer-member (expand)" -> "[root] module.composer.google_service_account.tbd-composer-sa (expand)"
		"[root] module.composer.google_project_iam_member.dataproc-editor-iam (expand)" -> "[root] module.composer.google_service_account.tbd-composer-sa (expand)"
		"[root] module.composer.google_project_iam_member.dataproc-sa-user-iam (expand)" -> "[root] module.composer.google_service_account.tbd-composer-sa (expand)"
		"[root] module.composer.google_project_service.api (expand)" -> "[root] module.composer.var.project_name (expand)"
		"[root] module.composer.google_service_account.tbd-composer-sa (expand)" -> "[root] module.composer.local.composer_account_id (expand)"
		"[root] module.composer.local.composer_account_id (expand)" -> "[root] module.composer.var.project_name (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.airflow_uri (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.composer_env (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.composer_env_id (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.composer_env_name (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.gcs_bucket (expand)"
		"[root] module.composer.module.composer (close)" -> "[root] module.composer.module.composer.output.gke_cluster (expand)"
		"[root] module.composer.module.composer (expand)" -> "[root] module.composer.google_project_iam_member.composer-member (expand)"
		"[root] module.composer.module.composer (expand)" -> "[root] module.composer.google_project_service.api (expand)"
		"[root] module.composer.module.composer.data.google_project.project (expand)" -> "[root] module.composer.module.composer.var.project_id (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.google_project_iam_member.composer_agent_service_account (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.local.master_authorized_networks_config (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.local.network_project_id (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.local.subnetwork_region (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.airflow_config_overrides (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.cloud_composer_connection_subnetwork (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.cloud_composer_network_ipv4_cidr_block (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.cloud_data_lineage_integration (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.cloud_sql_ipv4_cidr (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.composer_env_name (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.composer_service_account (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.enable_ip_masq_agent (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.enable_private_endpoint (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.env_variables (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.environment_size (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.image_version (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.kms_key_name (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.labels (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.maintenance_end_time (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.maintenance_recurrence (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.maintenance_start_time (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.master_ipv4_cidr (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.network (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.pod_ip_allocation_range_name (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.pypi_packages (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.resilience_mode (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.scheduled_snapshots_config (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.scheduler (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.service_ip_allocation_range_name (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.storage_bucket (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.subnetwork (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.tags (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.task_logs_retention_storage_mode (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.triggerer (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.use_private_environment (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.web_server (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.web_server_network_access_control (expand)"
		"[root] module.composer.module.composer.google_composer_environment.composer_env (expand)" -> "[root] module.composer.module.composer.var.worker (expand)"
		"[root] module.composer.module.composer.google_project_iam_member.composer_agent_service_account (expand)" -> "[root] module.composer.module.composer.local.cloud_composer_sa (expand)"
		"[root] module.composer.module.composer.google_project_iam_member.composer_agent_service_account (expand)" -> "[root] module.composer.module.composer.var.grant_sa_agent_permission (expand)"
		"[root] module.composer.module.composer.local.cloud_composer_sa (expand)" -> "[root] module.composer.module.composer.data.google_project.project (expand)"
		"[root] module.composer.module.composer.local.master_authorized_networks_config (expand)" -> "[root] module.composer.module.composer.var.master_authorized_networks (expand)"
		"[root] module.composer.module.composer.local.network_project_id (expand)" -> "[root] module.composer.module.composer.var.network_project_id (expand)"
		"[root] module.composer.module.composer.local.network_project_id (expand)" -> "[root] module.composer.module.composer.var.project_id (expand)"
		"[root] module.composer.module.composer.local.subnetwork_region (expand)" -> "[root] module.composer.module.composer.var.region (expand)"
		"[root] module.composer.module.composer.local.subnetwork_region (expand)" -> "[root] module.composer.module.composer.var.subnetwork_region (expand)"
		"[root] module.composer.module.composer.output.airflow_uri (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.output.composer_env (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.output.composer_env_id (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.output.composer_env_name (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.output.gcs_bucket (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.output.gke_cluster (expand)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] module.composer.module.composer.var.airflow_config_overrides (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.cloud_composer_connection_subnetwork (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.cloud_composer_network_ipv4_cidr_block (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.cloud_data_lineage_integration (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.cloud_sql_ipv4_cidr (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.composer_env_name (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.composer_env_name (expand)" -> "[root] module.composer.var.env_name (expand)"
		"[root] module.composer.module.composer.var.composer_service_account (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.enable_ip_masq_agent (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.enable_private_endpoint (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.env_variables (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.env_variables (expand)" -> "[root] module.composer.var.env_variables (expand)"
		"[root] module.composer.module.composer.var.environment_size (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.environment_size (expand)" -> "[root] module.composer.var.env_size (expand)"
		"[root] module.composer.module.composer.var.grant_sa_agent_permission (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.image_version (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.image_version (expand)" -> "[root] module.composer.var.image_version (expand)"
		"[root] module.composer.module.composer.var.kms_key_name (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.labels (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.maintenance_end_time (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.maintenance_recurrence (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.maintenance_start_time (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.master_authorized_networks (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.master_ipv4_cidr (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.network (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.network (expand)" -> "[root] module.composer.var.network (expand)"
		"[root] module.composer.module.composer.var.network_project_id (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.pod_ip_allocation_range_name (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.project_id (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.pypi_packages (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.region (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.region (expand)" -> "[root] module.composer.var.region (expand)"
		"[root] module.composer.module.composer.var.resilience_mode (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.scheduled_snapshots_config (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.scheduler (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.service_ip_allocation_range_name (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.storage_bucket (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.subnetwork (expand)" -> "[root] module.composer.google_compute_subnetwork.composer-subnet (expand)"
		"[root] module.composer.module.composer.var.subnetwork (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.subnetwork_region (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.tags (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.task_logs_retention_storage_mode (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.triggerer (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.use_private_environment (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.web_server (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.web_server_network_access_control (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.module.composer.var.worker (expand)" -> "[root] module.composer.module.composer (expand)"
		"[root] module.composer.output.data_service_account (expand)" -> "[root] module.composer.google_service_account.tbd-composer-sa (expand)"
		"[root] module.composer.output.gcs_bucket (expand)" -> "[root] module.composer.module.composer.output.gcs_bucket (expand)"
		"[root] module.composer.output.gke_cluster (expand)" -> "[root] module.composer.module.composer.output.gke_cluster (expand)"
		"[root] module.composer.var.env_name (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.env_size (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] local.code_bucket_name (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] local.composer_work_namespace (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] local.dbt_git_repo (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] local.dbt_git_repo_branch (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.env_variables (expand)" -> "[root] module.dataproc.output.dataproc_cluster_name (expand)"
		"[root] module.composer.var.image_version (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.network (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.project_name (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.region (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.subnet_address (expand)" -> "[root] local.composer_subnet_address (expand)"
		"[root] module.composer.var.subnet_address (expand)" -> "[root] module.composer (expand)"
		"[root] module.composer.var.subnet_name (expand)" -> "[root] module.composer (expand)"
		"[root] module.data-pipelines (close)" -> "[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer (expand)"
		"[root] module.data-pipelines (close)" -> "[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor (expand)"
		"[root] module.data-pipelines (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.dag-code (expand)"
		"[root] module.data-pipelines (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.dbt-dag-code (expand)"
		"[root] module.data-pipelines (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.job-code (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)" -> "[root] module.data-pipelines.var.bucket_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)" -> "[root] module.data-pipelines.var.project_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)" -> "[root] module.data-pipelines.var.region (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"]"
		"[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)" -> "[root] module.data-pipelines.var.data_bucket_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)" -> "[root] module.data-pipelines.var.project_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)" -> "[root] module.data-pipelines.var.region (expand)"
		"[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"]"
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer (expand)" -> "[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)"
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer (expand)" -> "[root] module.data-pipelines.var.data_service_account (expand)"
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor (expand)" -> "[root] module.data-pipelines.google_storage_bucket.tbd-data-bucket (expand)"
		"[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor (expand)" -> "[root] module.data-pipelines.var.data_service_account (expand)"
		"[root] module.data-pipelines.google_storage_bucket_object.dag-code (expand)" -> "[root] module.data-pipelines.local.dag_bucket_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket_object.dag-code (expand)" -> "[root] module.data-pipelines.local.dag_folder (expand)"
		"[root] module.data-pipelines.google_storage_bucket_object.dbt-dag-code (expand)" -> "[root] module.data-pipelines.local.dag_bucket_name (expand)"
		"[root] module.data-pipelines.google_storage_bucket_object.dbt-dag-code (expand)" -> "[root] module.data-pipelines.local.dag_folder (expand)"
		"[root] module.data-pipelines.google_storage_bucket_object.job-code (expand)" -> "[root] module.data-pipelines.google_storage_bucket.tbd-code-bucket (expand)"
		"[root] module.data-pipelines.local.dag_bucket_name (expand)" -> "[root] module.data-pipelines.local.dag_bucket_name_levels (expand)"
		"[root] module.data-pipelines.local.dag_bucket_name_length (expand)" -> "[root] module.data-pipelines.local.dag_bucket_name_levels (expand)"
		"[root] module.data-pipelines.local.dag_bucket_name_levels (expand)" -> "[root] module.data-pipelines.var.dag_bucket_name (expand)"
		"[root] module.data-pipelines.local.dag_folder (expand)" -> "[root] module.data-pipelines.local.dag_bucket_name_length (expand)"
		"[root] module.data-pipelines.var.bucket_name (expand)" -> "[root] local.code_bucket_name (expand)"
		"[root] module.data-pipelines.var.bucket_name (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.dag_bucket_name (expand)" -> "[root] module.composer.output.gcs_bucket (expand)"
		"[root] module.data-pipelines.var.dag_bucket_name (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.data_bucket_name (expand)" -> "[root] local.data_bucket_name (expand)"
		"[root] module.data-pipelines.var.data_bucket_name (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.data_service_account (expand)" -> "[root] module.composer.output.data_service_account (expand)"
		"[root] module.data-pipelines.var.data_service_account (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.project_name (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.project_name (expand)" -> "[root] var.project_name"
		"[root] module.data-pipelines.var.region (expand)" -> "[root] module.data-pipelines (expand)"
		"[root] module.data-pipelines.var.region (expand)" -> "[root] var.region"
		"[root] module.dataproc (close)" -> "[root] module.dataproc.output.dataproc_cluster_name (expand)"
		"[root] module.dataproc (expand)" -> "[root] module.vpc (close)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.google_project_service.dataproc (expand)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.var.image_version (expand)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.var.machine_type (expand)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.var.project_name (expand)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.var.region (expand)"
		"[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)" -> "[root] module.dataproc.var.subnet (expand)"
		"[root] module.dataproc.google_project_service.dataproc (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dataproc.output.dataproc_cluster_name (expand)" -> "[root] module.dataproc.google_dataproc_cluster.tbd-dataproc-cluster (expand)"
		"[root] module.dataproc.var.image_version (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dataproc.var.machine_type (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dataproc.var.project_name (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dataproc.var.region (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dataproc.var.subnet (expand)" -> "[root] local.notebook_subnet_id (expand)"
		"[root] module.dataproc.var.subnet (expand)" -> "[root] module.dataproc (expand)"
		"[root] module.dbt_docker_image (close)" -> "[root] module.dbt_docker_image.docker_registry_image.dbt (expand)"
		"[root] module.dbt_docker_image (close)" -> "[root] module.dbt_docker_image.output.dbt_image_name (expand)"
		"[root] module.dbt_docker_image (close)" -> "[root] module.dbt_docker_image.output.dbt_image_uri (expand)"
		"[root] module.dbt_docker_image (expand)" -> "[root] module.composer (close)"
		"[root] module.dbt_docker_image (expand)" -> "[root] module.gcr (close)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.dbt_spark_version (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.dbt_version (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.project_name (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.registry_hostname (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.registry_repo_name (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] module.dbt_docker_image.var.spark_version (expand)"
		"[root] module.dbt_docker_image.docker_image.dbt (expand)" -> "[root] provider[\"registry.terraform.io/kreuzwerker/docker\"]"
		"[root] module.dbt_docker_image.docker_registry_image.dbt (expand)" -> "[root] module.dbt_docker_image.docker_image.dbt (expand)"
		"[root] module.dbt_docker_image.output.dbt_image_name (expand)" -> "[root] module.dbt_docker_image.docker_image.dbt (expand)"
		"[root] module.dbt_docker_image.output.dbt_image_uri (expand)" -> "[root] module.dbt_docker_image.docker_image.dbt (expand)"
		"[root] module.dbt_docker_image.var.dbt_spark_version (expand)" -> "[root] local.dbt_spark_version (expand)"
		"[root] module.dbt_docker_image.var.dbt_spark_version (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.dbt_docker_image.var.dbt_version (expand)" -> "[root] local.dbt_version (expand)"
		"[root] module.dbt_docker_image.var.dbt_version (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.dbt_docker_image.var.project_name (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.dbt_docker_image.var.registry_hostname (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.dbt_docker_image.var.registry_repo_name (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.dbt_docker_image.var.spark_version (expand)" -> "[root] local.spark_version (expand)"
		"[root] module.dbt_docker_image.var.spark_version (expand)" -> "[root] module.dbt_docker_image (expand)"
		"[root] module.gcr (close)" -> "[root] module.gcr.google_artifact_registry_repository.registry (expand)"
		"[root] module.gcr (close)" -> "[root] module.gcr.output.registry_hostname (expand)"
		"[root] module.gcr.google_artifact_registry_repository.registry (expand)" -> "[root] module.gcr.google_project_service.api (expand)"
		"[root] module.gcr.google_artifact_registry_repository.registry (expand)" -> "[root] module.gcr.local.registry_hostname (expand)"
		"[root] module.gcr.google_project_service.api (expand)" -> "[root] module.gcr.var.project_name (expand)"
		"[root] module.gcr.google_project_service.api (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"]"
		"[root] module.gcr.local.registry_hostname (expand)" -> "[root] module.gcr.var.location (expand)"
		"[root] module.gcr.output.registry_hostname (expand)" -> "[root] module.gcr.local.registry_hostname (expand)"
		"[root] module.gcr.var.location (expand)" -> "[root] module.gcr (expand)"
		"[root] module.gcr.var.project_name (expand)" -> "[root] module.gcr (expand)"
		"[root] module.gcr.var.project_name (expand)" -> "[root] var.project_name"
		"[root] module.jupyter_docker_image (close)" -> "[root] module.jupyter_docker_image.docker_registry_image.jupyterlab (expand)"
		"[root] module.jupyter_docker_image (close)" -> "[root] module.jupyter_docker_image.output.jupyter_image_name (expand)"
		"[root] module.jupyter_docker_image (close)" -> "[root] module.jupyter_docker_image.output.jupyter_image_uri (expand)"
		"[root] module.jupyter_docker_image (expand)" -> "[root] module.gcr (close)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.dbt_spark_version (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.dbt_version (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.gcs_connector_version (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.jupyterlab_version (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.project_name (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.registry_hostname (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.registry_repo_name (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] module.jupyter_docker_image.var.spark_version (expand)"
		"[root] module.jupyter_docker_image.docker_image.jupyter (expand)" -> "[root] provider[\"registry.terraform.io/kreuzwerker/docker\"]"
		"[root] module.jupyter_docker_image.docker_registry_image.jupyterlab (expand)" -> "[root] module.jupyter_docker_image.docker_image.jupyter (expand)"
		"[root] module.jupyter_docker_image.output.jupyter_image_name (expand)" -> "[root] module.jupyter_docker_image.docker_image.jupyter (expand)"
		"[root] module.jupyter_docker_image.output.jupyter_image_uri (expand)" -> "[root] module.jupyter_docker_image.docker_image.jupyter (expand)"
		"[root] module.jupyter_docker_image.var.dbt_spark_version (expand)" -> "[root] local.dbt_spark_version (expand)"
		"[root] module.jupyter_docker_image.var.dbt_spark_version (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.dbt_version (expand)" -> "[root] local.dbt_version (expand)"
		"[root] module.jupyter_docker_image.var.dbt_version (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.gcs_connector_version (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.jupyterlab_version (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.project_name (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.registry_hostname (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.registry_repo_name (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.jupyter_docker_image.var.spark_version (expand)" -> "[root] local.spark_version (expand)"
		"[root] module.jupyter_docker_image.var.spark_version (expand)" -> "[root] module.jupyter_docker_image (expand)"
		"[root] module.vertex_ai_workbench (close)" -> "[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)"
		"[root] module.vertex_ai_workbench (close)" -> "[root] module.vertex_ai_workbench.google_project_iam_binding.token_creator_role (expand)"
		"[root] module.vertex_ai_workbench (close)" -> "[root] module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding (expand)"
		"[root] module.vertex_ai_workbench (expand)" -> "[root] module.jupyter_docker_image (close)"
		"[root] module.vertex_ai_workbench (expand)" -> "[root] module.vpc (close)"
		"[root] module.vertex_ai_workbench.data.google_project.project (expand)" -> "[root] module.vertex_ai_workbench.var.project_name (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.google_project_service.notebooks (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.google_storage_bucket_object.post-startup (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.local.zone (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.var.ai_notebook_image_repository (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.var.ai_notebook_image_tag (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.var.ai_notebook_instance_owner (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.var.network (expand)"
		"[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)" -> "[root] module.vertex_ai_workbench.var.subnet (expand)"
		"[root] module.vertex_ai_workbench.google_project_iam_binding.token_creator_role (expand)" -> "[root] module.vertex_ai_workbench.local.gce_service_account (expand)"
		"[root] module.vertex_ai_workbench.google_project_service.notebooks (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket (expand)" -> "[root] module.vertex_ai_workbench.var.project_name (expand)"
		"[root] module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket (expand)" -> "[root] module.vertex_ai_workbench.var.region (expand)"
		"[root] module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding (expand)" -> "[root] module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket (expand)"
		"[root] module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding (expand)" -> "[root] module.vertex_ai_workbench.local.gce_service_account (expand)"
		"[root] module.vertex_ai_workbench.google_storage_bucket_object.post-startup (expand)" -> "[root] module.vertex_ai_workbench.google_storage_bucket.notebook-conf-bucket (expand)"
		"[root] module.vertex_ai_workbench.local.gce_service_account (expand)" -> "[root] module.vertex_ai_workbench.data.google_project.project (expand)"
		"[root] module.vertex_ai_workbench.local.zone (expand)" -> "[root] module.vertex_ai_workbench.var.region (expand)"
		"[root] module.vertex_ai_workbench.var.ai_notebook_image_repository (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.ai_notebook_image_tag (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.ai_notebook_instance_owner (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.ai_notebook_instance_owner (expand)" -> "[root] var.ai_notebook_instance_owner"
		"[root] module.vertex_ai_workbench.var.network (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.project_name (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.region (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vertex_ai_workbench.var.subnet (expand)" -> "[root] local.notebook_subnet_id (expand)"
		"[root] module.vertex_ai_workbench.var.subnet (expand)" -> "[root] module.vertex_ai_workbench (expand)"
		"[root] module.vpc (close)" -> "[root] module.vpc.google_compute_firewall.default-internal-allow-all (expand)"
		"[root] module.vpc (close)" -> "[root] module.vpc.google_compute_firewall.fw-allow-ingress-from-iap (expand)"
		"[root] module.vpc (close)" -> "[root] module.vpc.module.cloud-router (close)"
		"[root] module.vpc (close)" -> "[root] module.vpc.module.vpc (close)"
		"[root] module.vpc (close)" -> "[root] module.vpc.output.network (expand)"
		"[root] module.vpc (close)" -> "[root] module.vpc.output.subnets (expand)"
		"[root] module.vpc.google_compute_firewall.default-internal-allow-all (expand)" -> "[root] module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.google_compute_firewall.default-internal-allow-all (expand)" -> "[root] module.vpc.var.subnet_address (expand)"
		"[root] module.vpc.google_compute_firewall.fw-allow-ingress-from-iap (expand)" -> "[root] module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.module.cloud-router (close)" -> "[root] module.vpc.module.cloud-router.output.nat (expand)"
		"[root] module.vpc.module.cloud-router (close)" -> "[root] module.vpc.module.cloud-router.output.router (expand)"
		"[root] module.vpc.module.cloud-router (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.bgp (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.description (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.name (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.network (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.project (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router.router (expand)" -> "[root] module.vpc.module.cloud-router.var.region (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router_nat.nats (expand)" -> "[root] module.vpc.module.cloud-router.google_compute_router.router (expand)"
		"[root] module.vpc.module.cloud-router.google_compute_router_nat.nats (expand)" -> "[root] module.vpc.module.cloud-router.var.nats (expand)"
		"[root] module.vpc.module.cloud-router.output.nat (expand)" -> "[root] module.vpc.module.cloud-router.google_compute_router_nat.nats (expand)"
		"[root] module.vpc.module.cloud-router.output.router (expand)" -> "[root] module.vpc.module.cloud-router.google_compute_router.router (expand)"
		"[root] module.vpc.module.cloud-router.var.bgp (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.description (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.name (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.nats (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.network (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.network (expand)" -> "[root] module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.module.cloud-router.var.project (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.project (expand)" -> "[root] module.vpc.var.project_name (expand)"
		"[root] module.vpc.module.cloud-router.var.region (expand)" -> "[root] module.vpc.module.cloud-router (expand)"
		"[root] module.vpc.module.cloud-router.var.region (expand)" -> "[root] module.vpc.var.region (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.firewall_rules (close)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.routes (close)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.subnets (close)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.network (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.network_self_link (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.project_id (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.route_names (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_flow_logs (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_ids (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_ips (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_names (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_private_access (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_regions (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_secondary_ranges (expand)"
		"[root] module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.output.subnets_self_links (expand)"
		"[root] module.vpc.module.vpc (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.module.vpc.local.rules (expand)" -> "[root] module.vpc.module.vpc.var.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules (close)" -> "[root] module.vpc.module.vpc.module.firewall_rules.output.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules (close)" -> "[root] module.vpc.module.vpc.module.firewall_rules.output.firewall_rules_ingress_egress (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.local.rules_all (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.local.egress_rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.egress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.local.ingress_rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.var.ingress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.local.rules_all (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.local.egress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.local.rules_all (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.local.ingress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.output.firewall_rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.output.firewall_rules_ingress_egress (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules.google_compute_firewall.rules_ingress_egress (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.egress_rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.egress_rules (expand)" -> "[root] module.vpc.module.vpc.var.egress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.ingress_rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.ingress_rules (expand)" -> "[root] module.vpc.module.vpc.var.ingress_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.project_id (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.project_id (expand)" -> "[root] module.vpc.module.vpc.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.rules (expand)" -> "[root] module.vpc.module.vpc.local.rules (expand)"
		"[root] module.vpc.module.vpc.module.firewall_rules.var.rules (expand)" -> "[root] module.vpc.module.vpc.module.firewall_rules (expand)"
		"[root] module.vpc.module.vpc.module.routes (close)" -> "[root] module.vpc.module.vpc.module.routes.output.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.routes.google_compute_route.route (expand)" -> "[root] module.vpc.module.vpc.module.routes.local.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.google_compute_route.route (expand)" -> "[root] module.vpc.module.vpc.module.routes.var.module_depends_on (expand)"
		"[root] module.vpc.module.vpc.module.routes.google_compute_route.route (expand)" -> "[root] module.vpc.module.vpc.module.routes.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.routes.local.routes (expand)" -> "[root] module.vpc.module.vpc.module.routes.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.routes.local.routes (expand)" -> "[root] module.vpc.module.vpc.module.routes.var.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.output.routes (expand)" -> "[root] module.vpc.module.vpc.module.routes.google_compute_route.route (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.module_depends_on (expand)" -> "[root] module.vpc.module.vpc.module.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.module_depends_on (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.project_id (expand)" -> "[root] module.vpc.module.vpc.module.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.project_id (expand)" -> "[root] module.vpc.module.vpc.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.routes (expand)" -> "[root] module.vpc.module.vpc.module.routes (expand)"
		"[root] module.vpc.module.vpc.module.routes.var.routes (expand)" -> "[root] module.vpc.module.vpc.var.routes (expand)"
		"[root] module.vpc.module.vpc.module.subnets (close)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)" -> "[root] module.vpc.module.vpc.module.subnets.local.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)" -> "[root] module.vpc.module.vpc.module.subnets.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)" -> "[root] module.vpc.module.vpc.module.subnets.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)" -> "[root] module.vpc.module.vpc.module.subnets.var.secondary_ranges (expand)"
		"[root] module.vpc.module.vpc.module.subnets.local.subnets (expand)" -> "[root] module.vpc.module.vpc.module.subnets.var.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)" -> "[root] module.vpc.module.vpc.module.subnets.google_compute_subnetwork.subnetwork (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.project_id (expand)" -> "[root] module.vpc.module.vpc.module.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.project_id (expand)" -> "[root] module.vpc.module.vpc.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.secondary_ranges (expand)" -> "[root] module.vpc.module.vpc.module.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.secondary_ranges (expand)" -> "[root] module.vpc.module.vpc.var.secondary_ranges (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.subnets (expand)" -> "[root] module.vpc.module.vpc.module.subnets (expand)"
		"[root] module.vpc.module.vpc.module.subnets.var.subnets (expand)" -> "[root] module.vpc.module.vpc.var.subnets (expand)"
		"[root] module.vpc.module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.vpc.output.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_self_link (expand)"
		"[root] module.vpc.module.vpc.module.vpc (close)" -> "[root] module.vpc.module.vpc.module.vpc.output.project_id (expand)"
		"[root] module.vpc.module.vpc.module.vpc (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.auto_create_subnetworks (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.delete_default_internet_gateway_routes (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.description (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.enable_ipv6_ula (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.internal_ipv6_range (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.mtu (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.network_firewall_policy_enforcement_order (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.routing_mode (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"]"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host (expand)" -> "[root] module.vpc.module.vpc.module.vpc.var.shared_vpc_host (expand)"
		"[root] module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host (expand)" -> "[root] provider[\"registry.terraform.io/hashicorp/google-beta\"]"
		"[root] module.vpc.module.vpc.module.vpc.output.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc.output.network_id (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc.output.network_self_link (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_network.network (expand)"
		"[root] module.vpc.module.vpc.module.vpc.output.project_id (expand)" -> "[root] module.vpc.module.vpc.module.vpc.google_compute_shared_vpc_host_project.shared_vpc_host (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.auto_create_subnetworks (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.auto_create_subnetworks (expand)" -> "[root] module.vpc.module.vpc.var.auto_create_subnetworks (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.delete_default_internet_gateway_routes (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.delete_default_internet_gateway_routes (expand)" -> "[root] module.vpc.module.vpc.var.delete_default_internet_gateway_routes (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.description (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.description (expand)" -> "[root] module.vpc.module.vpc.var.description (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.enable_ipv6_ula (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.enable_ipv6_ula (expand)" -> "[root] module.vpc.module.vpc.var.enable_ipv6_ula (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.internal_ipv6_range (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.internal_ipv6_range (expand)" -> "[root] module.vpc.module.vpc.var.internal_ipv6_range (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.mtu (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.mtu (expand)" -> "[root] module.vpc.module.vpc.var.mtu (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.network_firewall_policy_enforcement_order (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.network_firewall_policy_enforcement_order (expand)" -> "[root] module.vpc.module.vpc.var.network_firewall_policy_enforcement_order (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.network_name (expand)" -> "[root] module.vpc.module.vpc.var.network_name (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.project_id (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.project_id (expand)" -> "[root] module.vpc.module.vpc.var.project_id (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.routing_mode (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.routing_mode (expand)" -> "[root] module.vpc.module.vpc.var.routing_mode (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.shared_vpc_host (expand)" -> "[root] module.vpc.module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.module.vpc.var.shared_vpc_host (expand)" -> "[root] module.vpc.module.vpc.var.shared_vpc_host (expand)"
		"[root] module.vpc.module.vpc.output.network (expand)" -> "[root] module.vpc.module.vpc.module.vpc (close)"
		"[root] module.vpc.module.vpc.output.network_id (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_id (expand)"
		"[root] module.vpc.module.vpc.output.network_name (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_name (expand)"
		"[root] module.vpc.module.vpc.output.network_self_link (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.network_self_link (expand)"
		"[root] module.vpc.module.vpc.output.project_id (expand)" -> "[root] module.vpc.module.vpc.module.vpc.output.project_id (expand)"
		"[root] module.vpc.module.vpc.output.route_names (expand)" -> "[root] module.vpc.module.vpc.module.routes.output.routes (expand)"
		"[root] module.vpc.module.vpc.output.subnets (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_flow_logs (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_ids (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_ips (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_names (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_private_access (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_regions (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_secondary_ranges (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.output.subnets_self_links (expand)" -> "[root] module.vpc.module.vpc.module.subnets.output.subnets (expand)"
		"[root] module.vpc.module.vpc.var.auto_create_subnetworks (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.delete_default_internet_gateway_routes (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.description (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.egress_rules (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.enable_ipv6_ula (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.firewall_rules (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.ingress_rules (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.internal_ipv6_range (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.mtu (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.network_firewall_policy_enforcement_order (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.network_name (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.network_name (expand)" -> "[root] module.vpc.var.network_name (expand)"
		"[root] module.vpc.module.vpc.var.project_id (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.project_id (expand)" -> "[root] module.vpc.var.project_name (expand)"
		"[root] module.vpc.module.vpc.var.routes (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.routing_mode (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.secondary_ranges (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.shared_vpc_host (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.subnets (expand)" -> "[root] module.vpc.module.vpc (expand)"
		"[root] module.vpc.module.vpc.var.subnets (expand)" -> "[root] module.vpc.var.region (expand)"
		"[root] module.vpc.module.vpc.var.subnets (expand)" -> "[root] module.vpc.var.subnet_address (expand)"
		"[root] module.vpc.module.vpc.var.subnets (expand)" -> "[root] module.vpc.var.subnet_name (expand)"
		"[root] module.vpc.output.network (expand)" -> "[root] module.vpc.module.vpc.output.network (expand)"
		"[root] module.vpc.output.subnets (expand)" -> "[root] module.vpc.module.vpc.output.subnets (expand)"
		"[root] module.vpc.var.network_name (expand)" -> "[root] local.notebook_vpc_name (expand)"
		"[root] module.vpc.var.network_name (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.var.project_name (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.var.project_name (expand)" -> "[root] var.project_name"
		"[root] module.vpc.var.region (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.var.region (expand)" -> "[root] var.region"
		"[root] module.vpc.var.subnet_address (expand)" -> "[root] local.main_subnet_address (expand)"
		"[root] module.vpc.var.subnet_address (expand)" -> "[root] module.vpc (expand)"
		"[root] module.vpc.var.subnet_name (expand)" -> "[root] local.notebook_subnet_name (expand)"
		"[root] module.vpc.var.subnet_name (expand)" -> "[root] module.vpc (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google-beta\"] (close)" -> "[root] module.composer.module.composer.google_composer_environment.composer_env (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] data.google_client_config.provider (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] data.google_container_cluster.composer-gke-cluster (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] google_compute_firewall.allow-all-internal (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.composer.google_project_iam_member.dataproc-editor-iam (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.composer.google_project_iam_member.dataproc-sa-user-iam (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-code-bucket-iam-viewer (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.data-pipelines.google_storage_bucket_iam_member.tbd-data-bucket-iam-editor (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.dag-code (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.dbt-dag-code (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.data-pipelines.google_storage_bucket_object.job-code (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.vertex_ai_workbench.google_notebooks_instance.tbd_notebook (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.vertex_ai_workbench.google_project_iam_binding.token_creator_role (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)" -> "[root] module.vertex_ai_workbench.google_storage_bucket_iam_binding.binding (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"]" -> "[root] var.project_name"
		"[root] provider[\"registry.terraform.io/hashicorp/google\"]" -> "[root] var.region"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"] (close)" -> "[root] kubernetes_service.dbt-task-service (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" -> "[root] data.google_client_config.provider (expand)"
		"[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"]" -> "[root] data.google_container_cluster.composer-gke-cluster (expand)"
		"[root] provider[\"registry.terraform.io/kreuzwerker/docker\"] (close)" -> "[root] module.dbt_docker_image.docker_registry_image.dbt (expand)"
		"[root] provider[\"registry.terraform.io/kreuzwerker/docker\"] (close)" -> "[root] module.jupyter_docker_image.docker_registry_image.jupyterlab (expand)"
		"[root] provider[\"registry.terraform.io/kreuzwerker/docker\"]" -> "[root] module.gcr.output.registry_hostname (expand)"
		"[root] root" -> "[root] module.data-pipelines (close)"
		"[root] root" -> "[root] module.dataproc (close)"
		"[root] root" -> "[root] module.dbt_docker_image (close)"
		"[root] root" -> "[root] module.vertex_ai_workbench (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/google-beta\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/google\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/hashicorp/kubernetes\"] (close)"
		"[root] root" -> "[root] provider[\"registry.terraform.io/kreuzwerker/docker\"] (close)"
	}
}

